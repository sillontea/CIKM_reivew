[{"figure_path": "https://arxiv.org/html/2407.11418/x1.png", "caption": "Figure 1. Execution time (y-axis) and accuracy, shown in parentheses, for 3 fact-checking implementations: (i) FacTool\u00a0(Chern et\u00a0al., 2023), a recent state-of-the-art research work, (ii) a short LOTUS program, and (iii) the same LOTUS program implemented with our declarative optimizations and accuracy guarantees. Section\u00a05 provides our full methodology.", "description": "This figure compares the execution time and accuracy of three different fact-checking implementations. The first is FacTool, a state-of-the-art model. The second is a LOTUS program, and the third is the same LOTUS program but with optimizations enabled. The optimizations significantly improve execution time while maintaining accuracy.  Section 5 of the paper provides details on the methodology used in the comparison.", "section": "1 INTRODUCTION"}, {"figure_path": "https://arxiv.org/html/2407.11418/x2.png", "caption": "Figure 2. Example LOTUS program using semantic operators to return a summary of relevant papers. The function takes a description of the user\u2019s research interests. The program searches over papers, then filters based on whether the paper outperforms the baseline, and finally constructs a summary.", "description": "The figure showcases a concise LOTUS program (Python code) that leverages semantic operators to efficiently process and summarize research papers.  The program begins by using `sem_search` to retrieve papers relevant to specified research interests.  Next, `sem_filter` refines the results, selecting only papers claiming to outperform a given baseline. Finally, `sem_agg` generates a summary of the remaining papers' abstracts. This example highlights LOTUS's declarative, composable nature, enabling users to perform complex, AI-powered analyses using a high-level, natural-language-like interface.", "section": "3 THE LOTUS PROGRAMMING INTERFACE"}, {"figure_path": "https://arxiv.org/html/2407.11418/x3.png", "caption": "Figure 3. Example usage of sem_join and sem_sim_join.", "description": "The figure demonstrates the difference between two types of joins: sem_join and sem_sim_join.  The sem_join performs a join based on a user-specified natural language predicate that must be true for two rows to be joined, whereas sem_sim_join performs a join based on semantic similarity.  The example shows that sem_sim_join can retrieve multiple matches (here, K=10) from the right table for each row in the left table, based on similarity scores, whereas sem_join only retrieves rows that exactly satisfy the predicate.", "section": "3.2 Semantic Operators in LOTUS"}]